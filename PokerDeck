import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class PokerDeck {

	private List<PlayingCard> deck;
	private Map<HAND_TYPE, Integer> results;
	private Set<PlayingCard> hand;
	private int flushes = 0;
	private int fourofkinds = 0;
	private int fullhouses = 0;

	public PokerDeck() {
		deck = new ArrayList<PlayingCard>();
		results = new TreeMap<HAND_TYPE, Integer>();
		hand = new TreeSet<PlayingCard>();

		for (VALIDSUITS the_suit : VALIDSUITS.values()) {
			// System.out.println("inside VALIDSUITS the_suit :...");
			for (VALIDRANKS the_rank : VALIDRANKS.values()) {
				// System.out.println("Inside for(VALIDRANKS the_rank...");
				deck.add(new PlayingCard(the_suit, the_rank));

			}
		}

	}

	public static void main(String... args) {
		PokerDeck pd1 = new PokerDeck();
		// Change i<1 to i<100000
		for (int i = 0; i < 100001; i++) {
			pd1.deal();
		}
		
		pd1.results.put(HAND_TYPE.FLUSH, pd1.flushes);
		pd1.results.put(HAND_TYPE.FOUR_OF_A_KIND, pd1.fourofkinds);
		pd1.results.put(HAND_TYPE.FULL_HOUSE, pd1.fullhouses);
		
		System.out.printf("%s occurrences:", pd1.results.get(HAND_TYPE.FLUSH)+" Flush ");
		System.out.printf("\n%s occurrences:", pd1.results.get(HAND_TYPE.FOUR_OF_A_KIND) + " Four of A Kind ");
		System.out.printf("\n%s occurrences:", pd1.results.get(HAND_TYPE.FULL_HOUSE) + " Full House ");
	}

	public void printDeckUsingIterator(List<PlayingCard> deckq) {
		Iterator<PlayingCard> iter = deckq.iterator();
		while (iter.hasNext()) {
			PlayingCard card = iter.next();
			System.out.println(card.rank + " of " + card.suit);
		}
	}

	public List<PlayingCard> shuffle(List<PlayingCard> deckq) {
		ArrayList<PlayingCard> newDeck = new ArrayList<>(deckq);
		int deckSize = newDeck.size();

		Random rand = new Random();

		for (int i = 0; i < 51; i++) {
			int index1 = rand.nextInt(deckSize);
			int index2 = rand.nextInt(deckSize);
			PlayingCard card1 = newDeck.get(index1);
			PlayingCard card2 = newDeck.get(index2);
			newDeck.set(index2, card1);
			newDeck.set(index1, card2);
		}

		return newDeck;
	}

	public Boolean deal() {
		Boolean retVal = true;
		PlayingCard card;
		hand.clear();
		deck = shuffle(deck);
		for (int i = 0; i < 5; i++) {
			card = deck.get(i);
			hand.add(card);

		}
		rank_hand(hand);

		return retVal;
	}

	public HAND_TYPE rank_hand(Set<PlayingCard> hand1) {
		// System.out.println("Got inside the rank_hand");
		HAND_TYPE retVal = null;
		VALIDSUITS s1 = null;

		Iterator<PlayingCard> iter = hand1.iterator();

		// ***Flush

		int matches = 0;
		int ct1 = 0;
		while (iter.hasNext() && ct1 < 5) {
			if (s1 != null) {
				// System.out.println("s1 = " + s1);
				if (s1 == (iter.next().suit)) {
					matches++;
				}

			} else {
				s1 = iter.next().suit;
				// System.out.println("Set s1 to " + s1);
			}

		}
		if (matches == 4) {
			retVal = HAND_TYPE.FLUSH;
			flushes++;
			return retVal;
		} else {
			//System.out.println("there were " + matches + " Flush matches");

		}

		// ***Four of A Kind
		Iterator<PlayingCard> iter1 = hand1.iterator();
		VALIDRANKS r1 = null;
		VALIDRANKS r2 = null;
		int c1 = 0;
		int c2 = 0;
		int ct = 0;
		while (iter1.hasNext() && ct < 5) {
			VALIDRANKS temp = iter1.next().rank;
			if (r1 == null) {
				r1 = temp;
				// System.out.println("Setting r1 to " + r1);
			} else {
				if (r1 == temp) {
					c1++;
				} else {
					if (r2 == null) {
						r2 = temp;
					} else {
						if (r2 == temp) {
							c2++;
						}
					}
				}

			}
			// System.out.println("r1 = " + r1 + " and r2 = " + r2 + " and the
			// current rank is " + temp);
			ct++;
		}
		if (ct > 4 && ((c1 == 3 || c2 == 3))) {
			retVal = HAND_TYPE.FOUR_OF_A_KIND;
			fourofkinds++;
			return retVal;
		}
		
		// ***Full House
		Iterator<PlayingCard> iter2 = hand1.iterator();
		VALIDRANKS r11 = null;
		VALIDRANKS r22 = null;
		int c11 = 0;
		int c22 = 0;
		int ctf = 0;
		while (iter2.hasNext() && ctf < 5) {
			VALIDRANKS temp = iter2.next().rank;
			if (r11 == null) {
				r11 = temp;
				// System.out.println("Setting r1 to " + r1);
			} else {
				if (r11 == temp) {
					c11++;
				} else {
					if (r22 == null) {
						r22 = temp;
					} else {
						if (r22 == temp) {
							c22++;
						}
					}
				}

			}
			// System.out.println("r1 = " + r1 + " and r2 = " + r2 + " and the
			// current rank is " + temp);
			ctf++;
		}
		if (ctf > 4 && ((c11 == 2 && c22 == 1) ||( c22 == 2 && c11 == 1 ))) {
			retVal = HAND_TYPE.FULL_HOUSE;
			fullhouses++;
			return retVal;
		}

		return retVal;
	}

	public enum HAND_TYPE {
		FLUSH, FOUR_OF_A_KIND, FULL_HOUSE
	}

	@Override
	public boolean equals(Object arg0) {
		System.out.println("in equals");
		// TODO Auto-generated method stub
		return super.equals(arg0);
	}

	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return super.hashCode();
	}

}
